version: "2"

# to access this volume from another docker-compose, use external and the name
# datafiles:
#     external:
#       name: crosswordscraper_datafiles
# see CrossWord.DbMigrate/docker-compose-yml
volumes:
  datafiles:

# Remember to start the network before running this file:
# $ docker network create crosswordapi-net
#
# Then you can start each of the docker-compose.yml files like this:
# $ docker-compose -f project_one/docker-compose.yml up -d
# $ docker-compose -f project_two/docker-compose.yml up -d
networks:
  default:
    external:
      name: crosswordapi-net

services:
  db:
    container_name: crosswordapi.db
    image: mysql:8.0.15
    volumes:
      - ./init-db-scripts/:/docker-entrypoint-initdb.d/ # reload using docker-compose down -v (Note that this deletes the volumes!)
      - datafiles:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_TCP_PORT: 3360
    security_opt: # to fix the mbind: Operation not permitted log error
      - seccomp:unconfined
    ports:
      - "3360:3360"

  scraper:
    container_name: crosswordapi.scraper
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    environment:
      - DBHOST=db
      - DBPORT=3360
      - DBUSER=root
      - DBPASSWORD=secret
      - DATABASE=dictionary
      - SignalRHubURL=http://order.wazalo.com:5000/crosswords
    privileged: true
    cap_add:
      - "SYS_ADMIN"
    volumes:
      # note: make sure the log file exists on the host - otherwise docker creates it as a directory, this is done in the Dockerfile
      - ./logs/crossword_scraper_error.log:/app/out/crossword_scraper_error.log
      # see https://github.com/SeleniumHQ/docker-selenium/issues/79
      - /dev/shm:/dev/shm
    shm_size: 2G

  web:
    container_name: crosswordapi.web
    build:
      context: ./../
      dockerfile: CrossWord.Web/Dockerfile
    restart: always
    environment:
      - ApiBaseUrl=http://order.wazalo.com:8000/api/
      - ApiUserEmail=server@wazalo.com
      - ApiPassword=123ABCabc!
    expose:
      - "5000"
    ports:
      - "5000:5000"

  api:
    container_name: crosswordapi.api
    build:
      context: ./../
      dockerfile: CrossWord.API/Dockerfile
    restart: always
    environment:
      - DBHOST=db
      - DBPORT=3360
      - DBUSER=root
      - DBPASSWORD=secret
      - DATABASE=dictionary
    expose:
      - "8000"
    ports:
      - "8000:8000"
  #
  # https-portal:
  #   image: steveltn/https-portal:1
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   links:
  #     - web
  #   restart: always
  #   environment:
  #     DOMAINS: "order.wazalo.com -> http://web:5000"
  #     # STAGE: 'production'
  #     # DOMAINS: 'example.com -> http://web:5000'
  #     # STAGE: local # self signed certificate, note modify your hosts file to have example.com resolving to your docker host
  #     # c:\Windows\System32\Drivers\etc\hosts => 127.0.0.1           example.com
  #     # FORCE_RENEW: 'true' # only force renew if certificates are not chained correctly. Run the container again with the force_renew setting ONCE
  #     WEBSOCKET: "true"
