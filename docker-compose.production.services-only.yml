version: "3"

services:

  # Note! Use this after the init letsencrypt script has been run succesfully!
  # Used for handling the services separate from the proxy and certbot docker containers
  db:
    container_name: crossword.db
    image: mysql:8.0.34
    command: [--default-authentication-plugin=mysql_native_password]      # get rid of the Authentication plugin ‘caching_sha2_password’ cannot be loaded error
    volumes:
      - ./CrossWord.Scraper/init-db-scripts/:/docker-entrypoint-initdb.d/ # reload using docker-compose down -v (Note that this deletes the volumes!)
                                                                          # Also remember the 'create database <database>; use <database>;' lines in the sql files
      - datafiles:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_TCP_PORT: 3360
    security_opt: # to fix the mbind: Operation not permitted log error
      - seccomp:unconfined
    ports:
      - "3360:3360"

  scraper:
    container_name: crossword.scraper
    build:
      context: ./CrossWord.Scraper
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
      - api
    environment:
      DBHOST: db
      DBPORT: 3360
      DBUSER: root
      DBPASSWORD: secret
      DATABASE: dictionary
      ScraperSite: Kryssord # NorwegianSynonyms, Kryssord, KryssordLatest, KryssordHjelp or GratisKryssord
      ScraperContinueLastWord: 'false'
      ScraperStartLetterCount: 3
      ScraperEndLetterCount: 10
      ScraperSwarm: 'true'
      KryssordLatest: 'true'
      KryssordLatestDelaySeconds: 300
      SignalRHubURL: https://api.nerseth.com/crosswordsignalrhub
    privileged: 'true'
    cap_add:
      - "SYS_ADMIN"
    volumes:
      # note: make sure the log file exists on the host - otherwise docker creates it as a directory, this is done in the Dockerfile
      - ./CrossWord.Scraper/logs/crossword_scraper_error.log:/app/out/crossword_scraper_error.log
      # see https://github.com/SeleniumHQ/docker-selenium/issues/79
      - /dev/shm:/dev/shm
    shm_size: 2G

  web:
    container_name: crossword.web
    build:
      context: ./
      dockerfile: CrossWord.Web/Dockerfile
    restart: always
    depends_on:
      - api
    environment:
      ASPNETCORE_ENVIRONMENT: 'Production'      
      ASPNETCORE_URLS: http://+:5000
      ApiBaseUrl: https://api.nerseth.com/api/
      ApiUserEmail: server@wazalo.com
      ApiPassword: 123ABCabc!
      SignalRHubURL: https://api.nerseth.com/crosswordsignalrhub
    expose:
      - "5000"
    ports:
      - "5000:5000"

  api:
    container_name: crossword.api
    build:
      context: ./
      dockerfile: CrossWord.API/Dockerfile
    restart: always
    depends_on:
      - db
      - smtp
    environment:
      ASPNETCORE_ENVIRONMENT: 'Production'
      ASPNETCORE_URLS: http://+:8080
      DBHOST: db
      DBPORT: 3360
      DBUSER: root
      DBPASSWORD: secret
      DATABASE: dictionary
      KNOWNPROXIES: ''
      ExcludeWords__0: "LANDKODE"
      ExcludeWords__1: "IATA-FLYSELSKAPSKODE"
      ExcludeWords__2: "IATA-FLYPLASSKODE"
      ExcludeWords__3: "IATA-KODE"
      ExcludeWords__4: "FORKORTELSE"
      ExcludeWords__5: "ISO-KODE"
      ExcludeWords__6: "BY"
      ExcludeWords__7: "NAVN"
    expose:
      - "8080"
    ports:
      - "8080:8080"

  smtp:
    container_name: crossword.smtp
    image: namshi/smtp
    restart: always
    ports:
      - "25:25"

# to access this volume from another docker-compose, use external and the name
# datafiles:
#     external:
#       name: crosswordscraper_datafiles
# see CrossWord.DbMigrate/docker-compose-yml
volumes:
  datafiles:

# Remember to start the network before running this file:
# $ docker network create mydockernet
#
# Then you can start each of the docker-compose.yml files like this:
# $ docker-compose -f project_one/docker-compose.yml up -d
# $ docker-compose -f project_two/docker-compose.yml up -d
networks:
  default:
    external:
      name: mydockernet
